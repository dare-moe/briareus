(self.webpackChunkbriareus=self.webpackChunkbriareus||[]).push([[372],{3099:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return m}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o={title:"Overview",slug:"/"},s={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"Overview",description:"Briareus is a library set dedicated to start JVM instances in different clustered environments.",source:"@site/docs/overview.md",sourceDirName:".",slug:"/",permalink:"/docs/",version:"current",frontMatter:{title:"Overview",slug:"/"},sidebar:"docs",next:{title:"Api guide",permalink:"/docs/guides/api"}},l=[],c={toc:l};function m(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Briareus is a library set dedicated to start JVM instances in different clustered environments.\nIt's divided into separate artifacts for specific environments and common api module.\nCommon api give us ability to writing code reusable across implementations agnostic to cluster details.\nRequires Java 8 or later."),(0,r.kt)("p",null,"Three main concepts are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remote JVM options - describes specification for starting your application."),(0,r.kt)("li",{parentName:"ul"},"Remote JVM process - similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"java.lang.Process")," gives you ability to start or stop processes. "),(0,r.kt)("li",{parentName:"ul"},"Context - blackbox that does the dark magic.")),(0,r.kt)("p",null,"Please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/api"},"Api guide")," for more details."),(0,r.kt)("p",null,"And starting new JVM instance is really simple."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Obtain context\nBriareusContext<? extends RemoteJvmProcess> context = ...\n// Create specification\nFileSource jarSource = FileSources.fileSource(Paths.get("local/path/my-awesome-locacl.jar");\nString remoteJarName = "my-awesome.jar";\nFileEntry file = FileEntry.copy(jarSource, remoteJarName);\n\nRemoteJvmOptions spec = RemoteJvmOptions.newBuilder()\n  .maxHeapSize(128L * 1024 * 1024)\n  .addFile(file)\n  .addVmOption("-Dorg.slf4j.simpleLogger.defaultLogLevel=debug")\n  .addEnvironment("MY_ENV_VAR", "Briareus is great")\n  .addClasspath(remoteJarName)\n  .mainClass("com.example.Main")\n  .addArgument("--my-argument")\n  .build();\n// run and wait for completion\nRemoteJvmProcess process = context.start().toCompletableFuture().join();\nprocess.onExit().toCompletableFuture().join();\n')),(0,r.kt)("p",null,"Why so weird declaration for context? Well, different context may expose implementations of RemoteJvmProcess with\nadditional functionality. Thanks to Java ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)#Use-site_variance_annotations_(wildcards)"},"use site variance")," it's almost impossible to\nbuild nice api exposing methods that returns ",(0,r.kt)("inlineCode",{parentName:"p"},"CompletionStage"),".\nAs a rule of thumb use PECS mantra or specific context interface. "))}m.isMDXComponent=!0}}]);